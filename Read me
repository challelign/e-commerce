
 # DB_LOCAL_URL = mongodb://localhost:27017/e-amazon
# DB_LOCAL_URL = mongodb://localhost:27017/test?connectTimeoutMS=1000&bufferCommands=false&authSource=otherdb


rcc-> == class component skeleton.
rsc-> == stateless component skeleton.
rsf-> == stateless named function skeleton.


  const resetUrl = `${req.protocol}://${req.get('host')}/password/reset/${resetToken}`;

  //un comment this to deploy local and comment the above
  // const resetUrl = `${process.env.FRONTEND_URL}/password/reset/${resetToken}`;

#to use Stripe Payment card and other number use either one or two method
1. Always authenticate	4000002760003184
This card requires authentication on all transactions, regardless of how the card is set up.

2.Testing interactively with no verification
When testing interactively, use a card number, such as 4242 4242 4242 4242. Enter the card number in the Dashboard or in any payment form.

Use a valid future date, such as 12/34.
Use any three-digit CVC (four digits for American Express cards , 567 or 222).
Use any value you like for other form fields.



 To install all the depen
 use npm i depname  --legacy-peer-deps

 I use git branch name =  chashop

    "react-router-dom": "5.3",
       "rc-slider": "^9.6.5",
-> errorHandler.js
 error Handler class is called by middleware error.js class
 const ErrorHandler = require('../utils/errorHandler');

 and also called in productController.js
const ErrorHandler = require('../utils/errorHandler')



-> error.js
this class called in app.js
const errorMiddleware = require('./middlewares/errors')

-> catchAsyncErrors.js
this class handle database table atribute like name, title,
and catch the error while create,update and delete values to the mongodb
so this class called in productController.js call

const catchAsyncErrors = require('../middlewares/catchAsyncErrors')

->app.js
form this js file route , error, auth and other files called
// Import all routes

const products = require('./routes/product');
const auth = require('./routes/auth');
app.use('/api/v1', products);
app.use('/api/v1', auth);

// Middleware to handler error
app.use(errorMiddleware);


npm i axios react-alert react-alert-template-basic react-bootstrap react-helmet react-redux redux redux-thunk
redux-devtools-extension react-router-dom






















